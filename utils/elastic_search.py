from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
from pprint import pprint

es = Elasticsearch([])
index_name = ["codes"]
s = Search(using = es, index = index_name)

# query_all = {
#     'query': {
#         'match_all': {}
#     }
# }

# query_target = {
# 	'query': {
# 		'match': {
# 			'fields': 'data'
# 		}
# 	}
# }


# return a dictionary, each contains the two files and the match scores out of elasticsearch
def search(data):

	# res = es.search(index = index_name, body = query_all, timeout = 10)
	# pprint(res)
	res = {}
	result = s.query("match", winnow = "{}".format(data[1])).execute()
	num = []
	
	try:
		for i in range(3):
			a = result[i]
			res[i] = [data[0], a.file, a.meta.score]
			print(a.meta.score, a.file) # a.field
	except:
		a = result[0]
		res[0] = [data[0], a.file, a.meta.score] # a.field

	return res

# data is list with first place be the id number, second be the file name, third one be winnow value
def insert(data):
	es.index(index = index_name, doc_type = "code", body = {'file': data[1], 'winnow': data[2]}, id = data[0])

# for i in range(814):
# 	es.delete(index = index_name, doc_type = "code", id = i)
# for i in range(1, 11):
# 	print(es.get(index = index_name, doc_type='code', id = i))

print(search(["C:\\Users\\dingwang\\Desktop\\guava-master\\android\\guava\\src\\com\\google\\common\\base\\Absent.java","{(39, 878423335896073955343765347005809058235096327682), (42, 926534944508875807197739771647486084721323721754), (18, 871371001969627381197870207730407636462679518997), (112, 179725999588836828357823834136727495299427405009), (22, 871371001969627381197870207730407636462679518997), (105, 75654861211099506361172528693678161144490000354), (137, 620542605504840075457185240346672177684653802679), (25, 685051054235258816562514159570242773345511775371), (3, 117073554746058155956997041597336570145293930169), (84, 928841731463945292224220425695063873561148777735), (32, 285098168788668414929261078982666060108423745424), (124, 563033544480869738599319182053714754067630583267), (148, 343176405903627447131112671729399486215652545065), (117, 426239142262812168332279329704667559938622472964), (88, 392351291427177151042748495620602818007296134472), (143, 360205309752810314642329126409065122386164960229), (138, 218125829295530992524526255882876015618216952377), (141, 98429332931398599645877958519777168000638783403), (29, 453970606498263189154013294191713951696475627431), (99, 333430799320004085458347128085657100289224096805), (78, 113360981554164253529714731440563624232432111502), (55, 230066112127368402602398546632210636301858997168), (136, 671525168565311465077353277531908645697999680566), (14, 746081847468391270307024673120790996234599042213), (110, 881827272095252303547848784129340148294947652150), (8, 137658672394333632702379013193983255082801818360), (68, 604222318409054509843236534624142044178564552716), (6, 66852737848584486225388108433851658269070979171), (47, 115317301158692336384086479793259304742823619779), (100, 391018773227147654057659531566402722008235188092), (93, 568419559161236366975820603923809091839121036582), (122, 222532010745689589173291054152961565062116829061), (131, 82521707737542788342528011081112146586013055712), (51, 219885683630508661811313362097146625858430754663), (63, 34910538412717648310770554397649415030522815848), (113, 398879409633114804602839803532177936166764669911), (66, 57111666973522763565970842341042131187032133265), (75, 176557645705440505106506552670816197485489640856), (73, 272447526786873418928287424145907040485266972009), (77, 11785813523879318137011282255686083540898774835), (82, 299338347934025339826310565587660920112202256686), (153, 11273790359250589932576649492618404307418478281), (37, 291758100666629875383382586032168501407704098892), (12, 72271940736239328587181994968520506341453188985), (96, 253496084278654751573921144291972261075729478610), (128, 46971205513895960206090895210609387763839503680), (59, 49630810828017995519191189789096086716016241330)}"]))