from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search, Q
from pprint import pprint

es = Elasticsearch([])
index_name = ["winnows"]
s = Search(using = es, index = index_name)[0:50]

# query_all = {
#     'query': {
#         'match_all': {}
#     }
# }

# query_target = {
# 	'query': {
# 		'match': {
# 			'fields': 'data'
# 		}
# 	}
# }


# return a dictionary, each contains the two files and the match scores out of elasticsearch
# data is a list with data[0] is the file path, data[1] is the string of winnow values
def search(data):

	# res = es.search(index = index_name, body = query_all, timeout = 10)
	# pprint(res)

	w = sorted(eval(data[1]))
	res = {}
	shoulds = []
	
	for i in w:
		if i[0] > 499:
			break
		shoulds.append(Q({"match": {"winnow{}".format(i[0] + 1): str(i[1])}}))

	q = Q('bool', must = [], should = shoulds, minimum_should_match = "60%")
	result = s.query(q).execute()

	# try:
	# 	a = result[0]
	# 	res[0] = [data[0], a.file, a.meta.score] # a.field
	# except Exception as e:
	# 	print("There is no match found!")
	# else:
	# 	try:
	# 		a = result[1]
	# 		res[1] = [data[0], a.file, a.meta.score] # a.field
	# 	except:
	# 		print("Done.")
	# 	else:
	# 		try:
	# 			a = result[2]
	# 			res[2] = [data[0], a.file, a.meta.score] # a.field
	# 		except:
	# 			print("Done.")

	res[data[0]] = []
	if result is None:
		pass
	else:
		for i in result:
			res[data[0]].append((i.file, i.meta.id))
	return res


# data is list with first place be the id number, second be the file name, third one be a dictionary of winnow value
def insert(data):
	dic = data[2]
	body = {'file': data[1]}
	for i in dic:
		if i + 1 > 500:
			break
		body['winnow{}'.format(i+1)] = str(dic[i])
	es.index(index = index_name, doc_type = "code", body = body, id = data[0])


# for i in range(1, 11):
# 	print(es.get(index = index_name, doc_type='code', id = i))


# for i in range(1, 4504):
# 	es.delete(index = index_name, doc_type = "code", id = i)

# body = {'file': "test"}
# for i in range(1, 501):
# 	body['winnow{}'.format(i)] = 'a'
# es.index(index = index_name, doc_type = "code", body = body, id = 1)

# for i in range(1, 4479):
# 	es.delete(index = index_name, doc_type = "code", id = i)

# es.delete(index = index_name, doc_type = "code", id = 1)

# a = ["C:\\Users\\dingwang\\Desktop\\elasticsearch-master\\client\\benchmark\\src\\main\\java\\org\\elasticsearch\\client\\benchmark\\ops\\bulk\\BulkBenchmarkTask.java","{(92, 427375758879218266754666402733003702236680338168), (108, 27846305455028855388617469685088941730062159175), (188, 1220128028224148191824060258017583232850485830104), (99, 746081847468391270307024673120790996234599042213), (37, 90361367089917655291170011241203436618502975477), (183, 1220128028224148191824060258017583232850485830104), (13, 685051054235258816562514159570242773345511775371), (96, 685051054235258816562514159570242773345511775371), (66, 625311089525168307486192190160093266026586438319), (139, 265356073126633250307880333082752703703934223844), (171, 551093838468505487730887372673320759485031087749), (111, 722393230485812555872129450368526617298443135826), (47, 427375758879218266754666402733003702236680338168), (52, 427375758879218266754666402733003702236680338168), (162, 360620013331847845519824947629604904564264393053), (187, 1220128028224148191824060258017583232850485830104), (148, 88677615229909922044538109324950750647121458855), (182, 1220128028224148191824060258017583232850485830104), (127, 209147026669147604486823567226126528286378818305), (102, 685051054235258816562514159570242773345511775371), (196, 425686037874075298410996359279596427351504367577), (202, 603321390248859081622378203418649226587748461436), (93, 611075663265790662759474571380340797660330880829), (172, 82818376310043981120777317515712526177266459071), (72, 72271940736239328587181994968520506341453188985), (57, 427375758879218266754666402733003702236680338168), (201, 1104132496158375238797017603972982856128425396662), (193, 761729976914423797245591965782487184959993763276), (186, 1220128028224148191824060258017583232850485830104), (6, 871371001969627381197870207730407636462679518997), (136, 167777416683827601472835885454125831358860603309), (181, 1220128028224148191824060258017583232850485830104), (79, 668660457401962982799550273789352031043836106069), (80, 594250536240790700726693319539153624028810438426), (58, 611075663265790662759474571380340797660330880829), (61, 685051054235258816562514159570242773345511775371), (110, 695478866214927225929996232492154321907182019975), (143, 357965234681234538258376335987731139988687235829), (87, 329773855636074258335320143423211918623040726977), (176, 145907797541467670138731993502494361050820589513), (104, 211940339026423099856618719704854654996915376134), (151, 512781374322833472367403410333062006808036829808), (77, 685051054235258816562514159570242773345511775371), (185, 1220128028224148191824060258017583232850485830104), (180, 1220128028224148191824060258017583232850485830104), (1, 329773855636074258335320143423211918623040726977), (134, 183781462845498960193757083818699319873599984442), (30, 638347678350727354211206063651604023162229864584), (165, 371700419801316634962322238105404346123915366072), (2, 746081847468391270307024673120790996234599042213), (157, 565343648207160241399404096395037933452133989587), (184, 1220128028224148191824060258017583232850485830104), (129, 360747072918133290504351470165249554228070793518), (81, 137658672394333632702379013193983255082801818360), (19, 427375758879218266754666402733003702236680338168), (154, 565343648207160241399404096395037933452133989587), (24, 427375758879218266754666402733003702236680338168), (69, 638347678350727354211206063651604023162229864584), (33, 154839530030665052299184034102785634814227962568), (14, 427375758879218266754666402733003702236680338168), (85, 72271940736239328587181994968520506341453188985), (170, 814163076949294966357140258101132152968667655432), (10, 871371001969627381197870207730407636462679518997), (25, 611075663265790662759474571380340797660330880829), (177, 335548220936320798156351058026029459471057689274), (179, 797001185689201047867813657637551280428300432800), (121, 352706222611793070816796723581371468746497631906), (123, 209147026669147604486823567226126528286378818305), (27, 625311089525168307486192190160093266026586438319), (178, 399713491817134189564325014108626765773612669550), (42, 207538765409463530442349239599093407362228953801), (146, 251075710022017544279073184010449276955723644233), (116, 642043141815362974682029615397991410484505491688), (147, 30234422634614700433515628998269581263637061497)}"]
# pprint(search(a))


# a = []
# for i in range(1, 501):
# 	a.append('Q("match", winnow{} = data[1][{}])'.format(i, i))
# print(a)

# for i in range(1, 1345):
# 	es.delete(index = "simhashes", doc_type = "simhashes", id = i)

# body = {'file': "hhhh", "hashval": 111111}
# for i in range(20):
# 	body["perm{}".format(i)] = 1
# es.index(index = "simhashes", doc_type = "simhashes", body = body, id = 1)



# body = {'file': "test", "commit" : "12345"}
# for i in range(1, 501):
# 	body['winnow{}'.format(i)] = 'a'
# es.index(index = "git_winnows", doc_type = "winnows", body = body, id = 1)

# body = {'file': "hhhh", "hashval": 111111, "commit":"12345"}
# for i in range(20):
# 	body["perm{}".format(i)] = 1
# es.index(index = "git_simhashes", doc_type = "simhashes", body = body, id = 1)
